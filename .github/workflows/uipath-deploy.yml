name: Build, Publish and Run UiPath Process

on:
  push:
    branches:
      - main

jobs:
  build_publish_run:
    runs-on: windows-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Build UiPath project (optional)
      run: |
        echo "You can add UiPath Studio CLI build command here if needed"

    - name: Request OAuth token via Client Credentials
      id: get_token
      shell: pwsh
      env:
        UIPATH_CLIENT_ID: ${{ secrets.UIPATH_CLIENT_ID }}
        UIPATH_CLIENT_SECRET: ${{ secrets.UIPATH_CLIENT_SECRET }}
        UIPATH_SCOPE: 'OR.Jobs'
      run: |
        $clientId = $env:UIPATH_CLIENT_ID
        $clientSecret = $env:UIPATH_CLIENT_SECRET -replace '\$', '`$'
        $scope = $env:UIPATH_SCOPE

        $body = "grant_type=client_credentials&client_id=$clientId&client_secret=$clientSecret&scope=$scope"

        $response = Invoke-RestMethod -Uri "https://cloud.uipath.com/identity_/connect/token" `
            -Method Post `
            -Body $body `
            -ContentType "application/x-www-form-urlencoded"

        $accessToken = $response.access_token
        Write-Host "::add-mask::$accessToken"
        echo "##[set-output name=token;]$accessToken"

    - name: Upload package to Orchestrator
      shell: pwsh
      env:
        UIPATH_ACCOUNT_LOGICAL_NAME: ${{ secrets.UIPATH_ACCOUNT_LOGICAL_NAME }}
        UIPATH_TENANT: ${{ secrets.UIPATH_TENANT }}
        UIPATH_FOLDER: ${{ secrets.UIPATH_FOLDER }}
        ACCESS_TOKEN: ${{ steps.get_token.outputs.token }}
      run: |
        $accessToken = $env:ACCESS_TOKEN
        $packagePath = "TestAutomationProject.1.0.202484824.nupkg"

        if (!(Test-Path $packagePath)) {
          Write-Error "Package not found at path: $packagePath"
          exit 1
        }

        $uploadUrl = "https://cloud.uipath.com/$($env:UIPATH_ACCOUNT_LOGICAL_NAME)/$($env:UIPATH_TENANT)/odata/Processes/UiPath.Server.Configuration.OData.UploadPackage"

        $form = @{
          file = Get-Item $packagePath
          folderPath = $env:UIPATH_FOLDER
          overwriteExistingPackage = $true
        }

        Invoke-RestMethod -Uri $uploadUrl `
          -Headers @{ Authorization = "Bearer $accessToken" } `
          -Method Post `
          -Form $form

        Write-Host "Package uploaded successfully"

    - name: Start job in Orchestrator
      shell: pwsh
      env:
        UIPATH_ACCOUNT_LOGICAL_NAME: ${{ secrets.UIPATH_ACCOUNT_LOGICAL_NAME }}
        UIPATH_TENANT: ${{ secrets.UIPATH_TENANT }}
        UIPATH_FOLDER: ${{ secrets.UIPATH_FOLDER }}
        ACCESS_TOKEN: ${{ steps.get_token.outputs.token }}
      run: |
        $accessToken = $env:ACCESS_TOKEN
        $processName = "TestAutomationProject"

        $processesUrl = "https://cloud.uipath.com/$($env:UIPATH_ACCOUNT_LOGICAL_NAME)/$($env:UIPATH_TENANT)/odata/Processes?\$filter=Name eq '$processName'"

        $processesResponse = Invoke-RestMethod -Uri $processesUrl -Headers @{ Authorization = "Bearer $accessToken" }

        if ($processesResponse.value.Count -eq 0) {
          Write-Error "Process '$processName' not found in Orchestrator"
          exit 1
        }

        $processKey = $processesResponse.value[0].Key

        $startJobUrl = "https://cloud.uipath.com/$($env:UIPATH_ACCOUNT_LOGICAL_NAME)/$($env:UIPATH_TENANT)/odata/Jobs/UiPath.Server.Configuration.OData.StartJobs"

        $jobBody = @{
          startInfo = @{
            ReleaseKey = $processKey
            Strategy = "All"
          }
        } | ConvertTo-Json -Depth 10

        Invoke-RestMethod -Uri $startJobUrl -Headers @{ Authorization = "Bearer $accessToken" } -Method Post -Body $jobBody -ContentType "applicati
