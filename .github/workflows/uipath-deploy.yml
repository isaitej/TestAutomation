name: Build, Publish, and Run UiPath Process

on:
  push:
    branches:
      - main

jobs:
  build_publish_run:
    runs-on: windows-latest  # or self-hosted if you have one

    env:
      UIPATH_CLIENT_ID: "21a6955b-2fbe-4cd4-8d71-4124dff739ce"
      UIPATH_CLIENT_SECRET: "1ljhMu$Db!6boY6W"
      UIPATH_ACCOUNT_LOGICAL_NAME: "testbfsvyha"
      UIPATH_TENANT: "DefaultTenant"
      UIPATH_FOLDER: "Shared"
      UIPATH_PROJECT_NAME: "TestAutomationProject"

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Setup .NET (in case needed)
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'

    - name: Build UiPath package using CLI
      shell: pwsh
      run: |
        $projectPath = "$env:GITHUB_WORKSPACE"
        $outputPath = "$projectPath\output"

        # Create output directory
        New-Item -ItemType Directory -Path $outputPath -Force | Out-Null

        # Build .nupkg using UiPath CLI (adjust CLI path if needed)
        $cliPath = "C:\Program Files\UiPath\CLI\UiPath.CLI.exe"
        if (!(Test-Path $cliPath)) {
          Write-Error "UiPath CLI not found at $cliPath"
          exit 1
        }

        & "$cliPath" pack `
          --project-path "$projectPath" `
          --output-folder "$outputPath" `
          --no-version

        # Show resulting package
        Get-ChildItem "$outputPath" -Filter *.nupkg

    - name: Upload package to Orchestrator
      shell: pwsh
      run: |
        $package = Get-ChildItem "$env:GITHUB_WORKSPACE\output" -Filter *.nupkg | Select-Object -First 1
        if (-not $package) {
          Write-Error "No .nupkg found in output folder"
          exit 1
        }

        $body = @{
          grant_type = "client_credentials"
          client_id = $env:UIPATH_CLIENT_ID
          client_secret = $env:UIPATH_CLIENT_SECRET
          scope = "OR.Assets OR.Machines OR.Robots OR.Jobs OR.Execution OR.Folders"
        }

        $tokenResponse = Invoke-RestMethod -Uri "https://cloud.uipath.com/identity_/connect/token" `
          -Method POST `
          -Body $body `
          -ContentType "application/x-www-form-urlencoded"

        $accessToken = $tokenResponse.access_token
        Write-Host "::add-mask::$accessToken"

        $uploadUrl = "https://cloud.uipath.com/$($env:UIPATH_ACCOUNT_LOGICAL_NAME)/$($env:UIPATH_TENANT)/odata/Processes/UiPath.Server.Configuration.OData.UploadPackage"

        $form = @{
          file = Get-Item $package.FullName
        }

        Invoke-RestMethod -Uri $uploadUrl `
          -Method Post `
          -Headers @{ Authorization = "Bearer $accessToken" } `
          -Form $form

        Write-Host "Package uploaded successfully: $($package.Name)"

    - name: Start job in Orchestrator
      shell: pwsh
      run: |
        # Auth again
        $body = @{
          grant_type = "client_credentials"
          client_id = $env:UIPATH_CLIENT_ID
          client_secret = $env:UIPATH_CLIENT_SECRET
          scope = "OR.Jobs OR.Execution"
        }

        $tokenResponse = Invoke-RestMethod -Uri "https://cloud.uipath.com/identity_/connect/token" `
          -Method POST `
          -Body $body `
          -ContentType "application/x-www-form-urlencoded"

        $accessToken = $tokenResponse.access_token

        # Find the release key for the process
        $processName = $env:UIPATH_PROJECT_NAME
        $getReleaseUrl = "https://cloud.uipath.com/$($env:UIPATH_ACCOUNT_LOGICAL_NAME)/$($env:UIPATH_TENANT)/odata/Releases?\$filter=ProcessKey eq '$processName'"

        $releaseResp = Invoke-RestMethod -Uri $getReleaseUrl `
          -Headers @{ Authorization = "Bearer $accessToken" }

        if ($releaseResp.value.Count -eq 0) {
          Write-Error "No release found for process '$processName'"
          exit 1
        }

        $releaseKey = $releaseResp.value[0].Key

        # Start the job
        $startJobUrl = "https://cloud.uipath.com/$($env:UIPATH_ACCOUNT_LOGICAL_NAME)/$($env:UIPATH_TENANT)/odata/Jobs/UiPath.Server.Configuration.OData.StartJobs"

        $jobPayload = @{
          startInfo = @{
            ReleaseKey = $releaseKey
            Strategy = "All"
            RobotIds = @()
            InputArguments = "{}"
          }
        } | ConvertTo-Json -Depth 10

        Invoke-RestMethod -Uri $startJobUrl `
          -Method Post `
          -Headers @{ Authorization = "Bearer $accessToken" } `
          -Body $jobPayload `
          -ContentType "application/json"

        Write-Host "Job started successfully"
