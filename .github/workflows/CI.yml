name: UiPath Publish via REST API

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: windows-latest

    env:
      ORCH_URL: ${{ secrets.UIPATH_ORCHESTRATOR_URL }}
      ORCH_CLIENT_ID: ${{ secrets.UIPATH_CLIENT_ID }}
      ORCH_CLIENT_SECRET: ${{ secrets.UIPATH_CLIENT_SECRET }}
      ORCH_TENANT: ${{ secrets.UIPATH_TENANT_NAME }}
      PACKAGE_PATH: ./TestAutomation/package.nupkg  # adjust path if needed

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get OAuth Token
        id: get_token
        shell: pwsh
        run: |
          $body = @{
            grant_type    = "client_credentials"
            client_id     = "${{ env.ORCH_CLIENT_ID }}"
            client_secret = "${{ env.ORCH_CLIENT_SECRET }}"
            scope         = "OR.Jobs"
          }
          # Convert body to URL-encoded string
          $form = $body.GetEnumerator() | ForEach-Object { "$($_.Key)=$([uri]::EscapeDataString($_.Value))" } -join '&'

          $resp = Invoke-RestMethod -Method Post `
            -Uri "${{ env.ORCH_URL }}/api/account/authenticate" `
            -Body $form `
            -ContentType 'application/x-www-form-urlencoded'

          Write-Output "token=$($resp.access_token)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      - name: Upload Package to Orchestrator
        shell: pwsh
        run: |
          $token = "${{ steps.get_token.outputs.token }}"
          $packagePath = "${{ env.PACKAGE_PATH }}"
          $uri = "${{ env.ORCH_URL }}/odata/Processes/UiPath.Server.Configuration.OData.UploadPackage"
          $headers = @{
            Authorization = "Bearer $token"
          }
          $bytes = [System.IO.File]::ReadAllBytes($packagePath)
          $content = [System.Net.Http.ByteArrayContent]::new($bytes)
          $content.Headers.Add("Content-Type", "application/octet-stream")

          $client = New-Object System.Net.Http.HttpClient
          foreach ($header in $headers.GetEnumerator()) {
            $client.DefaultRequestHeaders.Add($header.Key, $header.Value)
          }
          $response = $client.PostAsync($uri, $content).Result
          if (-not $response.IsSuccessStatusCode) {
            Write-Error "Package upload failed with status code $($response.StatusCode)"
            exit 1
          } else {
            Write-Host "Package uploaded successfully"
          }
